var validationSheme = yup({
  account: yup.string(),
  password: yup.string
});

var validationSheme = (values) => {
  if (notGmail) {
    return yup({
      account: yup.string(),
      password: yup.string
    });
  }

  return yup({
    account: yup.string(),
  });
}

<FormField>
  <FormField.Label>Your Account</FormField.Label>
  <FormField.Textbox placeholder="Aa" disabled />
  {error && <FormField.HelperText>Error message</FormField.HelperText>}
</FormField>

<FormField
  disabled
  label={<FormField.Label>Your Account</FormField.Label>}
  control={<Popover content={<Content />}><FormField.Textbox placeholder="Aa" disabled={false} /></Popover>}
  helperText={<FormField.HelperText>Error message</FormField.HelperText>}
  error={true}
/>
React.cloneElement(control, {
  disabled: props.disabled,
});

FormField.Textbox = (props) => {
  const { disabled } = useContext();
  return (
    <Textbox disabled={disabled} {...props} />
  );
}

schemeVali
.Textbox:disbaled + .Label {

}

.Textbox:hover + .Label {
  
}

<div>
  {control}
  {label}
</div>
flex-direction: coloum-reverse;


const { register, errors, onSubmit, ref, triggerSubmit } = useForkHookForm();

const accountProps = register(account, {});
<form ref={ref} onSubmit={onSubmit}>
  <FormField
    disabled={false}
    defaultValue=""
    name="account"
    {...accountProps}
  />
  <FormField
    disabled={false}
    defaultValue=""
    name="account"
    {...register('password', {})}
  />
  {consitiob && (
    <FormField
      disabled={false}
      defaultValue=""
      name="account"
      {...register('password', {})}
    />)}
<button type="submit">Click</button>
</form>

<button onClick={triggerSubmit}>Click</button>